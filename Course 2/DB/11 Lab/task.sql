--TASK 3.1
SELECT * 
FROM Orders 
WHERE order_date BETWEEN '2007-12-17' AND '2007-12-31';

--TASK 3.2
SELECT *
FROM SALESREPS
WHERE MANAGER IS NULL;

--TASK 3.3
SELECT *
FROM OFFICES
WHERE REGION LIKE 'East%';

--TASK 3.4
SELECT * 
FROM Products 
WHERE Price > 1000
ORDER BY Price DESC;

--TASK 3.5
SELECT NAME, HIRE_DATE, AGE
FROM SALESREPS 
ORDER BY AGE;

--TASK 3.6
SELECT * 
FROM ORDERS 
ORDER BY AMOUNT DESC, QTY;

--TASK 3.7
SELECT *
FROM PRODUCTS 
ORDER BY PRICE DESC 
LIMIT 5;

--TASK 3.8
SELECT * 
FROM CUSTOMERS 
ORDER BY CREDIT_LIMIT DESC 
LIMIT 11;

--TASK 3.9
SELECT * 
FROM (
    SELECT ROW_NUMBER() OVER (ORDER BY HIRE_DATE) as ROW_NUM, *
    FROM SALESREPS
) 
WHERE ROW_NUM BETWEEN 4 AND 7;

--TASK 3.10
SELECT ROW_NUM, * FROM (
    SELECT *, ROW_NUMBER() OVER (ORDER BY AGE) as row_num FROM SALESREPS
)
WHERE AGE IN (
    SELECT AGE FROM (
        SELECT *, ROW_NUMBER() OVER (ORDER BY AGE) as row_num FROM SALESREPS
    )
    WHERE row_num BETWEEN 4 AND 8
);

--TASK 3.11
SELECT DISTINCT PRODUCT 
FROM ORDERS;

--TASK 3.12
SELECT CUST, COUNT(*) 
FROM ORDERS 
GROUP BY CUST;

--TASK 3.13
SELECT REP, AVG(AMOUNT) 
FROM ORDERS 
GROUP BY REP;

--TASK 3.14
SELECT DISTINCT REP, AMOUNT
FROM ORDERS 
WHERE AMOUNT > 10000;

--TASK 3.15
SELECT MFR_ID, COUNT(*) 
FROM PRODUCTS 
GROUP BY MFR_ID;

--TASK 3.16
SELECT MFR_ID, PRODUCT_ID, DESCRIPTION, MAX(PRICE) 
FROM PRODUCTS 
GROUP BY MFR_ID;

--TASK 3.17
SELECT C.COMPANY, P.DESCRIPTION, P.MFR_ID, O.QTY, O.AMOUNT
FROM CUSTOMERS C
JOIN ORDERS O ON C.CUST_NUM = O.CUST
JOIN PRODUCTS P ON O.PRODUCT = P.PRODUCT_ID;

--TASK 3.18
SELECT * 
FROM SALESREPS 
WHERE EMPL_NUM NOT IN (SELECT DISTINCT REP FROM ORDERS);

--TASK 3.19
SELECT * 
FROM SALESREPS S1
WHERE EXISTS (SELECT * FROM SALESREPS S2 WHERE S1.AGE = S2.AGE AND S1.EMPL_NUM <> S2.EMPL_NUM);

--TASK 3.20
SELECT P.DESCRIPTION
FROM PRODUCTS P
JOIN ORDERS O ON P.PRODUCT_ID = O.PRODUCT
JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM
WHERE C.COMPANY = 'First Corp.';

--TASK 3.21
SELECT * 
FROM ORDERS 
WHERE AMOUNT > (SELECT AVG(AMOUNT) FROM ORDERS);

--TASK 3.22
SELECT DISTINCT S1.* 
FROM SALESREPS S1
JOIN ORDERS O1 ON S1.EMPL_NUM = O1.REP
WHERE EXISTS (SELECT * FROM SALESREPS S2 JOIN ORDERS O2 ON S2.EMPL_NUM = O2.REP WHERE S1.EMPL_NUM <> S2.EMPL_NUM AND O1.CUST = O2.CUST);

--TASK 3.23 ???
SELECT C1.* 
FROM CUSTOMERS C1
JOIN ORDERS O1 ON C1.CUST_NUM = O1.CUST
WHERE EXISTS (SELECT * FROM CUSTOMERS C2 JOIN ORDERS O2 ON C2.CUST_NUM = O2.CUST WHERE C1.CUST_NUM <> C2.CUST_NUM AND O1.ORDER_DATE = O2.ORDER_DATE);

--TASK 3.24
SELECT S.REP_OFFICE, SUM(O.AMOUNT) 
FROM ORDERS O
JOIN SALESREPS S ON O.REP = S.EMPL_NUM
GROUP BY S.REP_OFFICE 
ORDER BY SUM(O.AMOUNT) DESC;

--TASK 3.25
SELECT * 
FROM SALESREPS 
WHERE EMPL_NUM IN (SELECT MANAGER FROM SALESREPS);

SELECT * FROM SALESREPS;
SELECT * FROM SALESREPS WHERE MANAGER IS NOT NULL;

--TASK 3.26
SELECT * 
FROM SALESREPS 
WHERE EMPL_NUM NOT IN (SELECT MANAGER FROM SALESREPS WHERE MANAGER IS NOT NULL);

--TASK 3.27
SELECT DISTINCT P.* 
FROM PRODUCTS P
JOIN ORDERS O ON P.PRODUCT_ID = O.PRODUCT
JOIN SALESREPS S ON O.REP = S.EMPL_NUM
JOIN OFFICES OFF ON S.REP_OFFICE = OFF.OFFICE
WHERE OFF.REGION = 'Eastern';

--TASK 3.28
SELECT S.NAME, S.HIRE_DATE
FROM SALESREPS S
JOIN ORDERS O ON S.EMPL_NUM = O.REP
GROUP BY S.EMPL_NUM
ORDER BY SUM(O.AMOUNT);

--TASK 3.29
SELECT O.* 
FROM ORDERS O
JOIN SALESREPS S ON O.REP = S.EMPL_NUM
JOIN OFFICES OFF ON S.REP_OFFICE = OFF.OFFICE
WHERE OFF.REGION = 'Eastern'
ORDER BY O.QTY ASC;

--TASK 3.30
SELECT P.* 
FROM PRODUCTS P
WHERE P.PRICE > (SELECT MAX(O.AMOUNT) FROM ORDERS O JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM WHERE C.COMPANY = 'First Corp.');

--TASK 3.31
SELECT P.* 
FROM PRODUCTS P
WHERE P.PRODUCT_ID NOT IN (SELECT O.PRODUCT FROM ORDERS O JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM WHERE C.COMPANY = 'First Corp');

--TASK 3.32
SELECT O.* 
FROM ORDERS O
JOIN CUSTOMERS C ON O.CUST = C.CUST_NUM
WHERE O.AMOUNT < (SELECT AVG(AMOUNT) FROM ORDERS WHERE CUST = C.CUST_NUM);

--TASK 3.33
SELECT DISTINCT S1.NAME 
FROM SALESREPS S1
JOIN ORDERS O1 ON S1.EMPL_NUM = O1.REP
WHERE strftime('%Y', O1.ORDER_DATE) = '2008'
AND S1.EMPL_NUM NOT IN (
    SELECT S2.EMPL_NUM
    FROM SALESREPS S2
    JOIN ORDERS O2 ON S2.EMPL_NUM = O2.REP
    WHERE strftime('%Y', O2.ORDER_DATE) = '2007'
);

SELECT DISTINCT S.NAME
FROM SALESREPS S
LEFT JOIN ORDERS O1 ON S.EMPL_NUM = O1.REP AND strftime('%Y', O1.ORDER_DATE) = '2008'
LEFT JOIN ORDERS O2 ON S.EMPL_NUM = O2.REP AND strftime('%Y', O2.ORDER_DATE) = '2007'
WHERE O1.ORDER_NUM IS NOT NULL AND O2.ORDER_NUM IS NULL;

--TASK 3.34
SELECT DISTINCT S1.NAME 
FROM SALESREPS S1
JOIN ORDERS O1 ON S1.EMPL_NUM = O1.REP
WHERE strftime('%Y', O1.ORDER_DATE) = '2007'
AND S1.EMPL_NUM NOT IN (
    SELECT S2.EMPL_NUM
    FROM SALESREPS S2
    JOIN ORDERS O2 ON S2.EMPL_NUM = O2.REP
    WHERE strftime('%Y', O2.ORDER_DATE) = '2008'
);

SELECT DISTINCT S.NAME
FROM SALESREPS S
LEFT JOIN ORDERS O1 ON S.EMPL_NUM = O1.REP AND strftime('%Y', O1.ORDER_DATE) = '2007'
LEFT JOIN ORDERS O2 ON S.EMPL_NUM = O2.REP AND strftime('%Y', O2.ORDER_DATE) = '2008'
WHERE O1.ORDER_NUM IS NOT NULL AND O2.ORDER_NUM IS NULL;

--TASK 3.35
SELECT C.* 
FROM CUSTOMERS C
WHERE EXISTS (SELECT * FROM ORDERS WHERE CUST = C.CUST_NUM AND strftime('%Y', ORDER_DATE) = '2007') 
AND EXISTS (SELECT * FROM ORDERS WHERE CUST = C.CUST_NUM AND strftime('%Y', ORDER_DATE) = '2008');

SELECT DISTINCT C.* 
FROM CUSTOMERS C
JOIN ORDERS O1 ON C.CUST_NUM = O1.CUST
JOIN ORDERS O2 ON C.CUST_NUM = O2.CUST
WHERE strftime('%Y', O1.ORDER_DATE) = '2007' AND strftime('%Y', O2.ORDER_DATE) = '2008';